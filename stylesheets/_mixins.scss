@function primary-colors() {
  @return _compose-shades(_base-color());
}

@function complement-colors() {
  @if (_complement() == false) and (_scheme() != 'tetrad') {
    @return _empty-array();
  }

  @return _compose-color(180);
}

@function secondary-1-colors() {
  @if (_scheme() == 'triad') {
    @return _compose-color(180 - _angle());
  } @else if (_scheme() == 'adjacent') or (_scheme() == 'tetrad') {
    @return _compose-color(_angle());
  } @else {
    @return _empty-array();
  }
}

@function secondary-2-colors() {
  @if (_scheme() == 'triad') or (_scheme() == 'tetrad') {
    @return _compose-color(180 + _angle());
  } @else if (_scheme() == 'adjacent') {
    @return _compose-color(-_angle());
  } @else {
    @return _empty-array();
  }
}

@function _compose-color($angle) {
    $color: _adjust-hue($angle);
    @return _compose-shades($color);
}

@function _adjust-hue($angle) {
  @return if(_mode() == 'ryb', ryb-adjust-hue(_base-color(), $angle), adjust-hue(_base-color(), $angle));
}

@function _compose-shades($color) {
  $shades: map-get($_scs-variations, _variation());

  $colors: ();
  @for $i from 1 through 5 {
    $colors: append($colors, _adjust-color($color, $shades, $i));
  }
  @return $colors;
}

@function _adjust-color($base-color, $shades, $n) {
  $sval: percentage(nth(nth($shades, $n), 1))/100;
  $lval: percentage(nth(nth($shades, $n), 2))/100;
  $color: scale-color($base-color, $saturation: $sval, $lightness: $lval);

  @return $color;
}

@function _empty-array() {
  $arr: ();
  @for $i from 1 through 5 {
    $arr: append($arr, null);
  }
  @return $arr;
}

@function _base-color() {
  @return _fetch('base-color', $_scs-base-color);
}

@function _variation() {
  @return _fetch('variation', $_scs-variation);
}

@function _scheme() {
  @return _fetch('scheme', $_scs-scheme);
}

@function _mode() {
  @return _fetch('mode', $_scs-mode);
}

@function _angle() {
  @return _fetch('angle', $_scs-angle);
}

@function _complement() {
  @return _fetch('complement', $_scs-complement);
}

@function _fetch($key, $default) {
  @return if(map-has-key($sass-color-schemes, $key), map-get($sass-color-schemes, $key), $default);
}
